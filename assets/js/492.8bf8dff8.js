(window.webpackJsonp=window.webpackJsonp||[]).push([[492],{771:function(e,a,t){"use strict";t.r(a);var s=t(14),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"vor-running-an-oracle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vor-running-an-oracle"}},[e._v("#")]),e._v(" VOR Running an Oracle")]),e._v(" "),a("p",[e._v("The VOR Oracle software monitors the "),a("code",[e._v("VORCoordinator")]),e._v(" smart contract for\nemitted events, and acts on those events to generate random numbers and the\nrequired proof, before sending the data back to "),a("code",[e._v("VORCoordinator")]),e._v(".")]),e._v(" "),a("p",[e._v("Running a VOR Provider Oracle is quick and easy, and this guide will run\nyou through getting set up as a VOR Provider.")]),e._v(" "),a("p",[e._v("The software is comprised of two applications:")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("oracle")]),e._v(" - the server application")]),e._v(" "),a("li",[a("code",[e._v("oraclecli")]),e._v(" - the CLI tool for "),a("code",[e._v("oracle")]),e._v(" server administration")])]),e._v(" "),a("h2",{attrs:{id:"prerequisites"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),a("p",[e._v("This guide uses Linux as the platform for running a VOR Oracle. The software\nhas been tested on Ubuntu and CentOS distros. It assumes your system has some\nbasic applications installed such as "),a("code",[e._v("git")]),e._v(", "),a("code",[e._v("curl")]),e._v(", "),a("code",[e._v("nano")]),e._v(" and "),a("code",[e._v("make")]),e._v(" etc.")]),e._v(" "),a("p",[e._v("Depending on your database backend of choice, you will also need either\n"),a("strong",[e._v("SQLite")]),e._v(" or "),a("strong",[e._v("PostgreSQL")]),e._v(" installing on your host.")]),e._v(" "),a("p",[a("strong",[e._v("Note:")]),e._v(" SQLite recommended mainly for dev/testing")]),e._v(" "),a("h2",{attrs:{id:"download-pre-build-binaries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#download-pre-build-binaries"}},[e._v("#")]),e._v(" Download pre-build binaries")]),e._v(" "),a("p",[e._v("The latest pre-built (linux) release can be downloaded from\n"),a("a",{attrs:{href:"https://github.com/unification-com/xfund-vor/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/unification-com/xfund-vor/releases"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("A SHA256 "),a("code",[e._v("checksum.txt")]),e._v(" is supplied with the archive. Download it to\nthe same location as the archive, and check:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("$ sha256sum "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--check")]),e._v(" checksum.txt \nvor-oracle_linux_v0.1.1.tar.gz: OK\n")])])]),a("h2",{attrs:{id:"compile-from-source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compile-from-source"}},[e._v("#")]),e._v(" Compile from source")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("You will require "),a("strong",[e._v("Golang")]),e._v(" to compile from source - the latest version can be\ninstalled by following the "),a("a",{attrs:{href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"}},[e._v("official instructions"),a("OutboundLink")],1),e._v(".")])]),e._v(" "),a("p",[e._v("Clone the repo:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("latest-release-tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(" https://github.com/unification-com/xfund-vor\n")])])]),a("p",[e._v("E.g.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" v0.1.0 https://github.com/unification-com/xfund-vor\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("[latest-release-tag]")]),e._v(" can be found at\n"),a("a",{attrs:{href:"https://github.com/unification-com/xfund-vor/releases",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/unification-com/xfund-vor/releases"),a("OutboundLink")],1)])]),e._v(" "),a("p",[e._v("Then compile the binaries using the "),a("code",[e._v("make install")]),e._v(" target:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" xfund-vor\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v("\n")])])]),a("p",[e._v("This will install the "),a("code",[e._v("oracle")]),e._v(" and "),a("code",[e._v("oraclecli")]),e._v(" binaries in your "),a("code",[e._v("$GOPATH/bin")])]),e._v(" "),a("p",[e._v("Alternatively, run the "),a("code",[e._v("build")]),e._v(" target:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" xfund-vor/oracle\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("make")]),e._v(" build\n")])])]),a("p",[e._v("which will compile the binaries to "),a("code",[e._v("xfund-vor/oracle/build")]),e._v(" and\n"),a("code",[e._v("xfund-vor/oracle-cli/build")])]),e._v(" "),a("h2",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("oracle")]),e._v(" requires a "),a("code",[e._v("config.json")]),e._v(" file, which will contain all the\ninformation it needs to run. By default it will look for "),a("code",[e._v("config.json")]),e._v(" in\nthe same directory as the "),a("code",[e._v("oracle")]),e._v(" binary, but the location can be set\nat runtime with the "),a("code",[e._v("-c")]),e._v(" flag.")]),e._v(" "),a("p",[e._v("Create your "),a("code",[e._v("config.json")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/vor\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/vor/config.json\n")])])]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"contract_address"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x00....."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"blockhash_store_address"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0x123..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"eth_http_host"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://127.0.0.1:8545"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"eth_ws_host"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"http://127.0.0.1:8545"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"network_id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("696969")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"serve"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"host"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"0.0.0.0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"port"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("8446")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"first_block"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"keystorage"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/home/username/vor/keystore.json"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"account"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"oracle"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"gas_limit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"max_gas_price"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"wait_confirmations"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"database"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"dialect"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sqlite"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[e._v('"storage"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/home/username/vor/oracle.db"')]),e._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("The config options are as follows:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("contract_address")]),e._v(" - the address of the "),a("code",[e._v("VORCoordinator")]),e._v(" smart contract. See\n"),a("a",{attrs:{href:"https://vor.unification.io/contracts.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("contracts"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("blockhash_store_address")]),e._v(" - the address of the "),a("code",[e._v("BlockHashStore")]),e._v(" smart contract. See\n"),a("a",{attrs:{href:"https://vor.unification.io/contracts.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("contracts"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("li",[a("code",[e._v("eth_http_host")]),e._v(" - HTTP(S) host for your Eth provider. E.g. Infura")]),e._v(" "),a("li",[a("code",[e._v("eth_ws_host")]),e._v(" - WS(S) host for your Eth provider. E.g. Infura")]),e._v(" "),a("li",[a("code",[e._v("network_id")]),e._v(" - Eth network ID, e.g. 1 = mainnet, 4 = Rinkeby etc.")]),e._v(" "),a("li",[a("code",[e._v("serve.host")]),e._v(" - host to serve the "),a("code",[e._v("oracle")]),e._v(" on. This is used by the "),a("code",[e._v("oracle-cli")]),e._v("\ntool, and should not be publicly exposed. Default "),a("code",[e._v("0.0.0.0")])]),e._v(" "),a("li",[a("code",[e._v("serve.port")]),e._v(" - port to serve the "),a("code",[e._v("oracle")]),e._v(" on. This is used by the "),a("code",[e._v("oracle-cli")]),e._v("\ntool, and should not be publicly exposed. Default "),a("code",[e._v("8445")])]),e._v(" "),a("li",[a("code",[e._v("first_block")]),e._v(" - default first block to scan the contract from. Should be\na value near to the block your oracle will do it's first run from. Only used\nwhen the oracle first connects. Default "),a("code",[e._v("1")])]),e._v(" "),a("li",[a("code",[e._v("keystorage.file")]),e._v(" - path to the "),a("code",[e._v("keystore")]),e._v(" which will contain your encrypted\nprivate key and other runtime info. It will be created on the oracle's first\nrun if one does not exist. Default "),a("code",[e._v("./keystore.json")])]),e._v(" "),a("li",[a("code",[e._v("keystore.account")]),e._v(" - account name used to identify the private key. Set on\nfirst run.")]),e._v(" "),a("li",[a("code",[e._v("gas_limit")]),e._v(" - gas units limit for fulfilling a request. Default "),a("code",[e._v("500000")])]),e._v(" "),a("li",[a("code",[e._v("max_gas_price")]),e._v(" - max gas price in gwei you are willing to pay to fulfil a request.\nGas price is estimated with each fulfillment Tx, but will be capped at this value. Default "),a("code",[e._v("150")])]),e._v(" "),a("li",[a("code",[e._v("wait_confirmations")]),e._v(" - number of block confirmations to wait before fulfilling a request. Default "),a("code",[e._v("10")])]),e._v(" "),a("li",[a("code",[e._v("database.dialect")]),e._v(" - "),a("code",[e._v("postgres")]),e._v(" or "),a("code",[e._v("sqlite")]),e._v(". Default "),a("code",[e._v("sqlite")])]),e._v(" "),a("li",[a("code",[e._v("database.storage")]),e._v(" - ("),a("code",[e._v("sqlite")]),e._v(" only) - path to the DB file. It will be created on the oracle's first\nrun if one does not exist. Default "),a("code",[e._v("./oracle.db")])]),e._v(" "),a("li",[a("code",[e._v("database.host")]),e._v(" - ("),a("code",[e._v("postgres")]),e._v(" only) - DB host IP/name")]),e._v(" "),a("li",[a("code",[e._v("database.port")]),e._v(" - ("),a("code",[e._v("postgres")]),e._v(" only) - DB Port")]),e._v(" "),a("li",[a("code",[e._v("database.user")]),e._v(" - ("),a("code",[e._v("postgres")]),e._v(" only) - DB username")]),e._v(" "),a("li",[a("code",[e._v("database.password")]),e._v(" - ("),a("code",[e._v("postgres")]),e._v(" only) - DB password")]),e._v(" "),a("li",[a("code",[e._v("database.database")]),e._v(" - ("),a("code",[e._v("postgres")]),e._v(" only) - DB name")])]),e._v(" "),a("h2",{attrs:{id:"first-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#first-run"}},[e._v("#")]),e._v(" First run")]),e._v(" "),a("p",[e._v("The first time "),a("code",[e._v("oracle")]),e._v(" is run, it will prompt for some input to further\nconfigure the environment.")]),e._v(" "),a("p",[e._v("Start the "),a("code",[e._v("oracle")]),e._v(", assuming "),a("code",[e._v("config.json")]),e._v(" has been saved to\n"),a("code",[e._v("$HOME/vor/config.json")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/path/to/oracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/vor/config.json\n")])])]),a("p",[e._v("You will be asked for:")]),e._v(" "),a("ol",[a("li",[e._v("Username - this will be used as the account name in "),a("code",[e._v("keystore.json")]),e._v(",\nand should be entered as the value for "),a("code",[e._v("keystore.account")]),e._v(" in "),a("code",[e._v("config.json")])]),e._v(" "),a("li",[e._v("Fee - your initial xFUND fee, for example 100000000 will be 0.1 xFUND")]),e._v(" "),a("li",[e._v("Add existing key/Create a new key - you can either import an existing\nEth private key, or have the "),a("code",[e._v("oracle")]),e._v(" create a new one for you.")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("If you elect to have the "),a("code",[e._v("oracle")]),e._v(" generate a new private key for you, you\nwill need to manually register your key with "),a("code",[e._v("VORCOOrdinator")]),e._v(".")])]),e._v(" "),a("p",[e._v("You need to ensure the wallet address has sufficient Eth to\nsend the "),a("code",[e._v("registerProvingKey")]),e._v(" transaction to "),a("code",[e._v("VORCOOrdinator")]),e._v(". If you\nopted for importing an existing key, this process is automatically run\nfor you, and your key will be registered on the "),a("code",[e._v("oracle")]),e._v("'s first run.")]),e._v(" "),a("p",[e._v("Once complete, you should see something along the lines of:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# some info about your config and key...")]),e._v("\n\nYour daemon api key:   rkf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n\nUse this key to login via cli/HTTP "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("command: oracle-cli settings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nKEEP THIS KEYS SAFE"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("It is important to key the "),a("strong",[e._v("daemon api key")]),e._v(" safe, as this is used to start\nthe oracle, and access its api via the "),a("code",[e._v("oraclecli")]),e._v(". The "),a("code",[e._v("oracle")]),e._v(" also uses\nit to encrypt/decrypt your "),a("code",[e._v("keystore")]),e._v(".")]),e._v(" "),a("p",[e._v("It is also advisable to backup the "),a("code",[e._v("keystore.json")]),e._v(" file.")])]),e._v(" "),a("p",[e._v("Finally, it will ask you to enter the "),a("strong",[e._v("api key")]),e._v(" previously output in order to start running\nthe "),a("code",[e._v("oracle")]),e._v(".")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("oracle")]),e._v(" can be stopped with "),a("key",[e._v("CTRL+C")]),e._v(", or the safer api method:")],1),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/path/to/oraclecli stop\n")])])]),a("p",[e._v("which will signal the "),a("code",[e._v("oracle")]),e._v(" to stop via its API.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[a("code",[e._v("oraclecli")]),e._v(" has its own configuration file, which will be covered later\nin this guide.")])]),e._v(" "),a("h2",{attrs:{id:"running-the-oracle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-the-oracle"}},[e._v("#")]),e._v(" Running the Oracle")]),e._v(" "),a("p",[e._v("Once configured, the "),a("code",[e._v("oracle")]),e._v(" can be run using:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/path/to/oracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/vor/config.json\n")])])]),a("p",[e._v("It will prompt for the "),a("strong",[e._v("api key")]),e._v(" which was output for oyu during the first run.")]),e._v(" "),a("p",[e._v("Optionally, the key can be passed to the "),a("code",[e._v("oracle")]),e._v(" using the "),a("code",[e._v("-k")]),e._v(" flag. It can be\npassed as either the key itself in plaintext (not recommended outside of testing), or\nas a filepath to a file containing the password.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("/path/to/oracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$HOME")]),e._v("/vor/config.json "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-k")]),e._v(" /path/to/password/file\n")])])]),a("p",[e._v("which is useful if running the "),a("code",[e._v("oracle")]),e._v(" as a service using "),a("code",[e._v("systemd")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flags"}},[e._v("#")]),e._v(" Flags")]),e._v(" "),a("p",[a("code",[e._v("-v")]),e._v(": Output "),a("code",[e._v("oracle")]),e._v(" version info and exit:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oracle "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-v")]),e._v("\n")])])]),a("p",[a("code",[e._v("-k")]),e._v(": Pass the keystore decryption key as a filepath or plaintext key:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-k")]),e._v(" /path/to/password/file\noracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-k")]),e._v(" fg1acljv8int8g5hutc3cr2kk24lpg2s\n")])])]),a("p",[a("code",[e._v("-c")]),e._v(": Pass the filepath to "),a("code",[e._v("config.json")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oracle start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-c")]),e._v(" /home/user/vor/config.json\n")])])]),a("h3",{attrs:{id:"running-the-oracle-as-a-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-the-oracle-as-a-service"}},[e._v("#")]),e._v(" Running the oracle as a service")]),e._v(" "),a("p",[e._v("It is recommended to run the "),a("code",[e._v("oracle")]),e._v(" as a background service, for example using\n"),a("code",[e._v("systemd")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("nano")]),e._v(" /etc/systemd/system/vor_oracle.service\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("[Unit]\nDescription=VOR Provider Oracle\n\n[Service]\nUser=USERNAME\nGroup=USERNAME\nWorkingDirectory=/home/USERNAME\nExecStart=/home/USERNAME/go/bin/oracle start -c /path/to/config.json -k /path/to/decrypt/pass\n\n[Install]\nWantedBy=default.target\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl daemon-reload\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start vor_oracle\n")])])]),a("h2",{attrs:{id:"oraclecli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oraclecli"}},[e._v("#")]),e._v(" oraclecli")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("oraclecli")]),e._v(" acts as a client to run administrative tasks on the "),a("code",[e._v("oracle")]),e._v(" daemon.\nIt allows an "),a("code",[e._v("oracle")]),e._v(" operator to change their fees, withdraw earned fees from\n"),a("code",[e._v("VORCoordinator")]),e._v(", stop the "),a("code",[e._v("oracle")]),e._v(", and query your fees and withdrawable xFUND.")]),e._v(" "),a("h3",{attrs:{id:"help"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#help"}},[e._v("#")]),e._v(" help")]),e._v(" "),a("p",[e._v("Outputs a list of commands")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("help")]),e._v("\n")])])]),a("h3",{attrs:{id:"settings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settings"}},[e._v("#")]),e._v(" settings")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("settings")]),e._v(" command allows you to set the configuration options for the CLI.\nConfiguration is stored in "),a("code",[e._v("$HOME/.oracle-cli_settings.json")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli settings\n")])])]),a("p",[e._v("You can configure the host & port the CLI will use to communicate with a running "),a("code",[e._v("oracle")]),e._v("\nand should equate to the values used in your "),a("code",[e._v("oracle")]),e._v("'s "),a("code",[e._v("config.json")])]),e._v(" "),a("p",[e._v("You can also set the "),a("strong",[e._v("api key")]),e._v(" which the CLI will need to authenticate when\ncommunicating with the "),a("code",[e._v("oracle")]),e._v(". This is the same as you use to start the "),a("code",[e._v("oracle")])]),e._v(" "),a("h3",{attrs:{id:"about"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#about"}},[e._v("#")]),e._v(" about")]),e._v(" "),a("p",[e._v("Outputs data about your "),a("code",[e._v("oracle")]),e._v(", such as your "),a("code",[e._v("keyHash")]),e._v(", wallet address, IP/PORT etc.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli about\n")])])]),a("h3",{attrs:{id:"changefee"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changefee"}},[e._v("#")]),e._v(" changefee")]),e._v(" "),a("p",[e._v("Allows you to change the base fee for fulfilling requests. The base fee is used\nfor all consumers for whom you have not set a granular fee.")]),e._v(" "),a("p",[e._v("Fee should be "),a("code",[e._v("amount * 10^9")]),e._v(", for example, if you want a fee of 0.2 xFUND,\nenter 200000000.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli changefee\n")])])]),a("h3",{attrs:{id:"changegranularfee"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changegranularfee"}},[e._v("#")]),e._v(" changegranularfee")]),e._v(" "),a("p",[e._v("Allows you to change the fee for fulfilling requests at a granular level for\na particular consumer contract address. This allows you to set fees dependent on the\nTx cost for fulfilling requests, and thus higher fees for more expensive consumer contracts.")]),e._v(" "),a("p",[e._v("Fee should be "),a("code",[e._v("amount * 10^9")]),e._v(", for example, if you want a fee of 0.2 xFUND,\nenter 200000000.")]),e._v(" "),a("p",[e._v("You will additionally be prompted for the contract address you are\napplying the granular fee to.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli changegranularfee\n")])])]),a("h3",{attrs:{id:"queryfees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryfees"}},[e._v("#")]),e._v(" queryfees")]),e._v(" "),a("p",[e._v("Query the fees you have currently set. Optionally pass a consumer contract address\nto query fees at a granular level. If you have not set a granular fee for the input\ncontract address, or do not input a contract address, the base fee will be returned.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli queryfees\noraclecli queryfees 0xD833215cBcc3f914bD1C9ece3EE7BF8B14f841bb\n")])])]),a("h3",{attrs:{id:"queryrequests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queryrequests"}},[e._v("#")]),e._v(" queryrequests")]),e._v(" "),a("p",[e._v("Query all randomness requests in the database, that match optional filters. Returns\na JSON object.")]),e._v(" "),a("p",[e._v("Status filters:\nThe "),a("code",[e._v("--status")]),e._v(" | "),a("code",[e._v("-s")]),e._v(" flag accepts the following:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-1 = no filter, return all results (default)\n0  = unknown status\n1  = request initialised\n2  = fulfill tx sent\n3  = failed to fulfil\n4  = fulfillment succeeded\n")])])]),a("p",[e._v("Examples:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli queryrequests "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--page")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--limit")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v("\noraclecli queryrequests "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--status")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\noraclecli queryrequests "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--order")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("asc\n")])])]),a("h3",{attrs:{id:"querywithdrawable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#querywithdrawable"}},[e._v("#")]),e._v(" querywithdrawable")]),e._v(" "),a("p",[e._v("Query the amount of fees you have accumulated, and are currently held by the\n"),a("code",[e._v("VORCoordinator")]),e._v(". You can withdraw these at any time.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli querywithdrawable\n")])])]),a("h3",{attrs:{id:"register"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#register"}},[e._v("#")]),e._v(" register")]),e._v(" "),a("p",[e._v("Register a new proving key with "),a("code",[e._v("VORCoordinator")]),e._v(". You will need to run this, for example\nif you change key, or have generated a new key on the "),a("code",[e._v("oracle")]),e._v("'s first run.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli register\n")])])]),a("h3",{attrs:{id:"stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stop"}},[e._v("#")]),e._v(" stop")]),e._v(" "),a("p",[e._v("Stops the "),a("code",[e._v("oracle")]),e._v(" daemon.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli stop\n")])])]),a("h3",{attrs:{id:"withdraw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withdraw"}},[e._v("#")]),e._v(" withdraw")]),e._v(" "),a("p",[e._v("Withdraw any accumulated tokens held by the "),a("code",[e._v("VORCoordinator")]),e._v(" to the selected\nrecipient address. The recipient can be your Oracle's wallet address, or any other\nbeneficiary you choose.")]),e._v(" "),a("p",[e._v("Withdrawal amount should be "),a("code",[e._v("amount * 10^9")]),e._v(", for example, if you wish to withdraw\n2 xFUND, enter 2000000000. The amount must not exceed the value output by the\n"),a("code",[e._v("querywithdrawable")]),e._v(" command.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli withdraw\n")])])]),a("h3",{attrs:{id:"version"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version"}},[e._v("#")]),e._v(" version")]),e._v(" "),a("p",[e._v("Output "),a("code",[e._v("oraclecli")]),e._v("'s version information")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli version\n")])])]),a("h3",{attrs:{id:"analytics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analytics"}},[e._v("#")]),e._v(" analytics")]),e._v(" "),a("p",[e._v("Run some basic analytics to return gas, gas price, costs and fee statistics.\nPass the number of successful requests you want to analyse, for example 100\nto analyse the last 100 successful fulfillments.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli analytics "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v("\noraclecli analytics "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v("\n")])])]),a("h3",{attrs:{id:"analytics-sim"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analytics-sim"}},[e._v("#")]),e._v(" analytics sim")]),e._v(" "),a("p",[e._v("Pass simulation values for gas price and fees using the "),a("code",[e._v("--if-gas")]),e._v(" and "),a("code",[e._v("--if-fees")]),e._v("\nflags respectively. These will be applied to the analytics results in place of\nthe real values to see what costs/fees would be like with these simulated values.")]),e._v(" "),a("p",[e._v("use the "),a("code",[e._v("[num_to_analyse]")]),e._v(" arg to limit the number of requests to analyse.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("--consumer")]),e._v(" flag can be used to filter a single consumer contract, which can help\nset granular fees for individual consumers.")]),e._v(" "),a("p",[e._v("Example:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli analytics sim "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-g")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("150")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.05")]),e._v("\noraclecli analytics sim "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" --if-gas"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("150")]),e._v(" --if-fees"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.1")]),e._v("\noraclecli analytics sim "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("200")]),e._v(" --if-gas"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("100")]),e._v(" --if-fees"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0.05")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--consumer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("0x232AbC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])]),a("h3",{attrs:{id:"analytics-consumers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#analytics-consumers"}},[e._v("#")]),e._v(" analytics consumers")]),e._v(" "),a("p",[e._v("Run some analytics to return gas, gas price, costs and fee statistics\nfor all contracts served. Results are grouped by each consumer contract.")]),e._v(" "),a("p",[e._v("Optional [consumer_address] can be passed to filter by that address")]),e._v(" "),a("p",[e._v("Example:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("oraclecli analytics consumers\noraclecli analytics consumers 0x1234AbcD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);