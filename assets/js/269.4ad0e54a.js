(window.webpackJsonp=window.webpackJsonp||[]).push([[269],{548:function(e,t,a){"use strict";a.r(t);var n=a(14),s=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"und-query-ibc-channel-unreceived-acks"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#und-query-ibc-channel-unreceived-acks"}},[e._v("#")]),e._v(" und query ibc channel unreceived-acks")]),e._v(" "),t("p",[e._v("Query all the unreceived acks associated with a channel")]),e._v(" "),t("h3",{attrs:{id:"synopsis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[e._v("#")]),e._v(" Synopsis")]),e._v(" "),t("p",[e._v("Given a list of acknowledgement sequences from counterparty, determine if an ack on the counterparty chain has been received on the executing chain.")]),e._v(" "),t("p",[e._v("The return value represents:")]),e._v(" "),t("ul",[t("li",[e._v("Unreceived packet acknowledgement: packet commitment exists on original sending (executing) chain and ack exists on receiving chain.")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("und query ibc channel unreceived-acks [port-id] [channel-id] [flags]\n")])])]),t("h3",{attrs:{id:"examples"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("und query ibc channel unreceived-acks [port-id] [channel-id] --sequences=1,2,3\n")])])]),t("h3",{attrs:{id:"options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('      --grpc-addr string       the gRPC endpoint to use for this chain\n      --grpc-insecure          allow gRPC over insecure channels, if not the server must use TLS\n      --height int             Use a specific height to query state at (this can error if the node is pruning state)\n  -h, --help                   help for unreceived-acks\n      --node string            &lt;host&gt;:&lt;port&gt; to CometBFT RPC interface for this chain (default "tcp://localhost:26657")\n  -o, --output string          Output format (text|json) (default "text")\n      --sequences int64Slice   comma separated list of packet sequence numbers (default [])\n')])])]),t("h3",{attrs:{id:"options-inherited-from-parent-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options-inherited-from-parent-commands"}},[e._v("#")]),e._v(" Options inherited from parent commands")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("      --chain-id string   The network chain ID\n")])])]),t("h3",{attrs:{id:"see-also"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" SEE ALSO")]),e._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_query_ibc_channel.html"}},[e._v("und query ibc channel")]),e._v("\t - IBC channel query subcommands")],1)]),e._v(" "),t("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-6-may-2025"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-6-may-2025"}},[e._v("#")]),e._v(" Auto generated by spf13/cobra on 6-May-2025")])])}),[],!1,null,null,null);t.default=s.exports}}]);