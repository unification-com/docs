(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{397:function(e,t,s){"use strict";s.r(t);var a=s(14),n=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"und-keys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#und-keys"}},[e._v("#")]),e._v(" und keys")]),e._v(" "),t("p",[e._v("Manage your application's keys")]),e._v(" "),t("h3",{attrs:{id:"synopsis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synopsis"}},[e._v("#")]),e._v(" Synopsis")]),e._v(" "),t("p",[e._v("Keyring management commands. These keys may be in any format supported by the\nCometBFT crypto library and can be used by light-clients, full nodes, or any other application\nthat needs to sign with a private key.")]),e._v(" "),t("p",[e._v("The keyring supports the following backends:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("os          Uses the operating system's default credentials store.\nfile        Uses encrypted file-based keystore within the app's configuration directory.\n            This keyring will request a password each time it is accessed, which may occur\n            multiple times in a single command resulting in repeated password prompts.\nkwallet     Uses KDE Wallet Manager as a credentials management application.\npass        Uses the pass command line utility to store and retrieve keys.\ntest        Stores keys insecurely to disk. It does not prompt for a password to be unlocked\n            and it should be use only for testing purposes.\n")])])]),t("p",[e._v("kwallet and pass backends depend on external tools. Refer to their respective documentation for more\ninformation:\nKWallet     https://github.com/KDE/kwallet\npass        https://www.passwordstore.org/")]),e._v(" "),t("p",[e._v("The pass backend requires GnuPG: https://gnupg.org/")]),e._v(" "),t("h3",{attrs:{id:"options"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#options"}},[e._v("#")]),e._v(" Options")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  -h, --help                     help for keys\n      --keyring-backend string   Select keyring\'s backend (os|file|kwallet|pass|test|memory) (default "os")\n      --keyring-dir string       The client Keyring directory; if omitted, the default \'home\' directory will be used\n      --output string            Output format (text|json) (default "text")\n')])])]),t("h3",{attrs:{id:"see-also"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#see-also"}},[e._v("#")]),e._v(" SEE ALSO")]),e._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und.html"}},[e._v("und")]),e._v("\t - Unification Mainchain App")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_add.html"}},[e._v("und keys add")]),e._v("\t - Add an encrypted private key (either newly generated or recovered), encrypt it, and save to <name> file")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_delete.html"}},[e._v("und keys delete")]),e._v("\t - Delete the given keys")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_export.html"}},[e._v("und keys export")]),e._v("\t - Export private keys")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_import.html"}},[e._v("und keys import")]),e._v("\t - Import private keys into the local keybase")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_import-hex.html"}},[e._v("und keys import-hex")]),e._v("\t - Import private keys into the local keybase")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_list.html"}},[e._v("und keys list")]),e._v("\t - List all keys")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_list-key-types.html"}},[e._v("und keys list-key-types")]),e._v("\t - List all key types")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_migrate.html"}},[e._v("und keys migrate")]),e._v("\t - Migrate keys from amino to proto serialization format")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_mnemonic.html"}},[e._v("und keys mnemonic")]),e._v("\t - Compute the bip39 mnemonic for some input entropy")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_parse.html"}},[e._v("und keys parse")]),e._v("\t - Parse address from hex to bech32 and vice versa")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_rename.html"}},[e._v("und keys rename")]),e._v("\t - Rename an existing key")],1),e._v(" "),t("li",[t("RouterLink",{attrs:{to:"/mainchain/software/und_cmd/und_keys_show.html"}},[e._v("und keys show")]),e._v("\t - Retrieve key information by name or address")],1)]),e._v(" "),t("h6",{attrs:{id:"auto-generated-by-spf13-cobra-on-6-may-2025"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-by-spf13-cobra-on-6-may-2025"}},[e._v("#")]),e._v(" Auto generated by spf13/cobra on 6-May-2025")])])}),[],!1,null,null,null);t.default=n.exports}}]);