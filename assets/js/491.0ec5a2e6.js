(window.webpackJsonp=window.webpackJsonp||[]).push([[491],{772:function(e,t,r){"use strict";r.r(t);var o=r(14),a=Object(o.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vor-interacting-with-the-dnd-example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vor-interacting-with-the-dnd-example"}},[e._v("#")]),e._v(" VOR Interacting with the DnD example")]),e._v(" "),t("p",[e._v("If you haven't already, run through the "),t("RouterLink",{attrs:{to:"/vor/guide/implementation.html"}},[e._v("full implementation example")])],1),e._v(" "),t("p",[e._v("This guide assumes you are familiar with Solidity development frameworks\nsuch as Truffle/Hardhat.")]),e._v(" "),t("h2",{attrs:{id:"prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prerequisites"}},[e._v("#")]),e._v(" Prerequisites")]),e._v(" "),t("p",[e._v("The contract will be deployed on Rinkeby testnet. You will need:")]),e._v(" "),t("ol",[t("li",[e._v("wallets with test Eth - for example from the "),t("a",{attrs:{href:"https://sepoliafaucet.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("faucet"),t("OutboundLink")],1)]),e._v(" "),t("li",[e._v("xFUNDMOCK tokens for each wallet interacting, including the owner. See\n"),t("RouterLink",{attrs:{to:"/vor/contracts.html"}},[e._v("contracts")]),e._v(" for the Rinkeby testnet address, and call the\n"),t("code",[e._v("gimme()")]),e._v(" function to get 10 xFUNDMOCK tokens.")],1)]),e._v(" "),t("h2",{attrs:{id:"deployment"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),t("p",[e._v("Write your deployment script for your contract (this will be dependent on your framework\nof choice). You will need to pass the two contract values to the "),t("code",[e._v("constructor")]),e._v("\nfor both "),t("code",[e._v("xFUNDMOCK")]),e._v(" and the "),t("code",[e._v("VORCoordinator")]),e._v(". These can be obtained from\n"),t("RouterLink",{attrs:{to:"/vor/contracts.html"}},[e._v("contracts")]),e._v(".")],1),e._v(" "),t("p",[e._v("Once you're ready, deploy your contract on Rinkeby. You can also optionally\nverify the contract source code on Etherscan.")]),e._v(" "),t("h2",{attrs:{id:"initialise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initialise"}},[e._v("#")]),e._v(" Initialise")]),e._v(" "),t("p",[e._v("Once deployed, we need to call a couple of functions to set things up.")]),e._v(" "),t("h3",{attrs:{id:"dnd-increasevorallowance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-increasevorallowance"}},[e._v("#")]),e._v(" DnD.increaseVorAllowance")]),e._v(" "),t("p",[e._v("The first thing we need to do is allow the "),t("code",[e._v("VORCoordinator")]),e._v(" smart contract\nto spend xFUNDMOCK on behalf of our DnD smart contract. This allows us to\nrequest random numbers, and for the "),t("code",[e._v("VORCoordinator")]),e._v(" to transfer fees to\nthe VOR Oracle Provider.")]),e._v(" "),t("p",[t("code",[e._v("increaseVorAllowance")]),e._v(' can be called from your framework\'s development console,\nor if you have verified the source code on Etherscan, from their "Write Contract"\nfeature.')]),e._v(" "),t("p",[e._v("The amount should be suitably high to cover any future costs. Many services\n(for example Uniswap), do this once with the maximum allowable "),t("code",[e._v("uint256")]),e._v('\nvalue "115792089237316195423570985008687907853269984665640564039457584007913129639935"')]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[t("code",[e._v("increaseVorAllowance")]),e._v(" must be called by the wallet that deployed the DnD\nexample smart contract")])]),e._v(" "),t("h3",{attrs:{id:"xfundmock-increaseallowance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xfundmock-increaseallowance"}},[e._v("#")]),e._v(" xFUNDMOCK.increaseAllowance")]),e._v(" "),t("p",[t("em",[e._v("Each")]),e._v(" wallet that interacts with the DnD smart contract and intends to call\nthe "),t("code",[e._v("rollForHit")]),e._v(" function will need to allow the DnD smart contract to spend\nxFUNDMOCK tokens on their behalf.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("increaseAllowance")]),e._v(" function can be executed on Etherscan (see "),t("RouterLink",{attrs:{to:"/vor/contracts.html"}},[e._v("contracts")]),e._v("\nfor the Rinkeby address), using Metamask etc. Similarly, the amount\nshould be sufficiently high, and the "),t("code",[e._v("spender")]),e._v(" value should be the address\nof the deployed DnD smart contract.")],1),e._v(" "),t("h3",{attrs:{id:"vorcoordinator-getprovidergranularfee"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vorcoordinator-getprovidergranularfee"}},[e._v("#")]),e._v(" VORCoordinator.getProviderGranularFee")]),e._v(" "),t("p",[e._v("It's good practice to check the current fees for your contract before requesting\nrandomness. This can be done by calling the\n"),t("RouterLink",{attrs:{to:"/vor/api/VORCoordinator.html#VORCoordinator-getProviderGranularFee-bytes32-address-"}},[e._v("getProviderGranularFee")]),e._v(" function in the\n"),t("code",[e._v("VORCoordinator")]),e._v(" contract and passing it the "),t("code",[e._v("keyHash")]),e._v(" of the provider Oracle you're\nrequesting from, along with the address of your smart contract.")],1),e._v(" "),t("p",[e._v("The "),t("code",[e._v("getProviderGranularFee")]),e._v(" function can be called on\nEtherscan (see "),t("RouterLink",{attrs:{to:"/vor/contracts.html"}},[e._v("contracts")]),e._v(", or via a helper function in your own contract\nusing the "),t("code",[e._v("IVORCoordinator")]),e._v(" interface in the "),t("code",[e._v("ConsumerBase")]),e._v(" library.")],1),e._v(" "),t("h2",{attrs:{id:"interact"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#interact"}},[e._v("#")]),e._v(" Interact")]),e._v(" "),t("p",[e._v("Now we have the boring stuff out of the way, we can actually run the game.\nAs before, these functions can be called via your Solidity framework of choice\nor via Etherscan.")]),e._v(" "),t("h3",{attrs:{id:"dnd-addmonster"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-addmonster"}},[e._v("#")]),e._v(" DnD.addMonster")]),e._v(" "),t("p",[e._v('This must be called by the wallet that deployed the contract. It\'s possible\nto add up to 20 monsters, with each one requiring a short name (for example\n"Orc"), and an AC value between 1 - 20.')]),e._v(" "),t("h3",{attrs:{id:"dnd-monsters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-monsters"}},[e._v("#")]),e._v(" DnD.monsters")]),e._v(" "),t("p",[t("code",[e._v("monsters")]),e._v(" has a built-in getter, which will accept the Id of a monster\nand retrieve its stats. The result returned will be the name and AC.")]),e._v(" "),t("h3",{attrs:{id:"dnd-changestrmodifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-changestrmodifier"}},[e._v("#")]),e._v(" DnD.changeStrModifier")]),e._v(" "),t("p",[e._v("Each wallet calling the "),t("code",[e._v("rollForHit")]),e._v(" can optionally change their STR modifier,\nup to 5. This modifier gets added to the d20 roll when the randomness request\nis fulfilled.")]),e._v(" "),t("h3",{attrs:{id:"dnd-rollforhit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-rollforhit"}},[e._v("#")]),e._v(" DnD.rollForHit")]),e._v(" "),t("p",[e._v("A wallet can call the "),t("code",[e._v("rollForHit")]),e._v(" to generate a random d20 roll to determin\nif they hit the monster or not. There are 4 required parameters:")]),e._v(" "),t("ol",[t("li",[e._v("The "),t("code",[e._v("monsetrId")]),e._v(" of the monster being hit. See "),t("code",[e._v("DnD.monsters")]),e._v(" above")]),e._v(" "),t("li",[e._v("A "),t("code",[e._v("seed")]),e._v(" value - this can be any number, and gets mixed in with the\nrandom number generation")]),e._v(" "),t("li",[e._v("The "),t("code",[e._v("keyhash")]),e._v(" for the provider you wish to fulfil the request. This can be\nobtained from the "),t("RouterLink",{attrs:{to:"/vor/providers.html"}},[e._v("providers")]),e._v(" page.")],1),e._v(" "),t("li",[e._v("the "),t("code",[e._v("fee")]),e._v(" amount required to pay for the request. This will be deducted\nfrom the wallet calling this function.")])]),e._v(" "),t("p",[e._v("::: warn\nA VOR Provider's base fee is available on the "),t("RouterLink",{attrs:{to:"/vor/providers.html"}},[e._v("providers")]),e._v(" page\nor by querying the "),t("code",[e._v("VORCoordinator")]),e._v(" smart contract. This is the minimum\namount they will accept for fulfilling a request.")],1),e._v(" "),t("p",[e._v("However, providers may also set granular fees on a per-consumer contract\nbasis, because not every contract is the same and more complex consumer\ncontracts will incur higher gas costs for the provider.")]),e._v(" "),t("p",[e._v("The current fee for your contract can be acquired by calling the\n"),t("code",[e._v("VORCoordinator.getProviderGranularFee()")]),e._v(" function and passing the\nprovider's "),t("code",[e._v("keyHash")]),e._v(" along with the address of your contract.")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("VORCoordinator")]),e._v(" address is available on the "),t("RouterLink",{attrs:{to:"/vor/contracts.html"}},[e._v("contracts")]),e._v("\npage.\n:::")],1),e._v(" "),t("p",[e._v("Once a request has been initialised, the VOR Provider Oracle will see\na "),t("code",[e._v("RandomnessRequest")]),e._v(" event emitted in the "),t("code",[e._v("VORCoordinator")]),e._v(" smart\ncontract, generate a random number, and call your contract's\n"),t("code",[e._v("fulfillRandomness")]),e._v(" function to complete the process.")]),e._v(" "),t("h3",{attrs:{id:"dnd-getlastresult"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dnd-getlastresult"}},[e._v("#")]),e._v(" DnD.getLastResult")]),e._v(" "),t("p",[e._v("It's possible to monitor the DnD contract's event logs and watch for the\n"),t("code",[e._v("HitResult")]),e._v(" event. This indicates that the VOR Provider Oracle has fulfilled\nthe randomness request.")]),e._v(" "),t("p",[e._v("Calling the "),t("code",[e._v("DnD.getLastResult")]),e._v(" function requires 2 parameters:")]),e._v(" "),t("ol",[t("li",[t("code",[e._v("player")]),e._v(" - the wallet address of the player that rolled")]),e._v(" "),t("li",[t("code",[e._v("monsterId")]),e._v(" - the ID of the monster they attempted to hit")])]),e._v(" "),t("p",[e._v("The result returned will be something along the lines of:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("[\n  roll: '17',\n  modified: '19',\n  result: 'hit',\n  isRolling: false\n]\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);