(window.webpackJsonp=window.webpackJsonp||[]).push([[481],{759:function(e,t,s){"use strict";s.r(t);var n=s(14),r=Object(n.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"vorconsumerbase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vorconsumerbase"}},[e._v("#")]),e._v(" VORConsumerBase")]),e._v(" "),t("p",[e._v("PURPOSE")]),e._v(" "),t("p",[e._v("Reggie the Random Oracle (not his real job) wants to provide randomness\nto Vera the verifier in such a way that Vera can be sure he's not\nmaking his output up to suit himself. Reggie provides Vera a public key\nto which he knows the secret key. Each time Vera provides a seed to\nReggie, he gives back a value which is computed completely\ndeterministically from the seed and the secret key.")]),e._v(" "),t("p",[e._v("Reggie provides a proof by which Vera can verify that the output was\ncorrectly computed once Reggie tells it to her, but without that proof,\nthe output is indistinguishable to her from a uniform random sample\nfrom the output space.")]),e._v(" "),t("p",[e._v("The purpose of this contract is to make it easy for unrelated contracts\nto talk to Vera the verifier about the work Reggie is doing, to provide\nsimple access to a verifiable source of randomness.")]),e._v(" "),t("p",[e._v("USAGE")]),e._v(" "),t("p",[e._v("Calling contracts must inherit from VORConsumerBase, and can\ninitialize VORConsumerBase's attributes in their constructor as\nshown:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("  contract VORConsumer {\n    constuctor(<other arguments>, address _vorCoordinator, address _xfund)\n      VORConsumerBase(_vorCoordinator, _xfund) public {\n        <initialization with other arguments goes here>\n      }\n  }\n")])])]),t("p",[e._v("The oracle will have given you an ID for the VOR keypair they have\ncommitted to (let's call it keyHash), and have told you the minimum xFUND\nprice for VOR service. Make sure your contract has sufficient xFUND, and\ncall requestRandomness(keyHash, fee, seed), where seed is the input you\nwant to generate randomness from.")]),e._v(" "),t("p",[e._v("Once the VORCoordinator has received and validated the oracle's response\nto your request, it will call your contract's fulfillRandomness method.")]),e._v(" "),t("p",[e._v("The randomness argument to fulfillRandomness is the actual random value\ngenerated from your seed.")]),e._v(" "),t("p",[e._v('The requestId argument is generated from the keyHash and the seed by\nmakeRequestId(keyHash, seed). If your contract could have concurrent\nrequests open, you can use the requestId to track which seed is\nassociated with which randomness. See VORRequestIDBase.sol for more\ndetails. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,\nif your contract could have multiple requests in flight simultaneously.)')]),e._v(" "),t("p",[e._v("Colliding "),t("code",[e._v("requestId")]),e._v("s are cryptographically impossible as long as seeds\ndiffer. (Which is critical to making unpredictable randomness! See the\nnext section.)")]),e._v(" "),t("p",[e._v("SECURITY CONSIDERATIONS")]),e._v(" "),t("p",[e._v("A method with the ability to call your fulfillRandomness method directly\ncould spoof a VOR response with any random value, so it's critical that\nit cannot be directly called by anything other than this base contract\n(specifically, by the VORConsumerBase.rawFulfillRandomness method).")]),e._v(" "),t("p",[e._v("For your users to trust that your contract's random behavior is free\nfrom malicious interference, it's best if you can write it so that all\nbehaviors implied by a VOR response are executed "),t("em",[e._v("during")]),e._v(" your\nfulfillRandomness method. If your contract must store the response (or\nanything derived from it) and use it later, you must ensure that any\nuser-significant behavior which depends on that stored value cannot be\nmanipulated by a subsequent VOR request.")]),e._v(" "),t("p",[e._v("Similarly, both miners and the VOR oracle itself have some influence\nover the order in which VOR responses appear on the blockchain, so if\nyour contract could have multiple VOR requests in flight simultaneously,\nyou must ensure that the order in which the VOR responses arrive cannot\nbe used to manipulate your contract's user-significant behavior.")]),e._v(" "),t("p",[e._v("Since the ultimate input to the VOR is mixed with the block hash of the\nblock in which the request is made, user-provided seeds have no impact\non its economic security properties. They are only included for API\ncompatability with previous versions of this contract.")]),e._v(" "),t("p",[e._v("Since the block hash of the block which contains the requestRandomness\ncall is mixed into the input to the VOR "),t("em",[e._v("last")]),e._v(", a sufficiently powerful\nminer could, in principle, fork the blockchain to evict the block\ncontaining the request, forcing the request to be included in a\ndifferent block with a different hash, and therefore a different input\nto the VOR. However, such an attack would incur a substantial economic\ncost. This cost scales with the number of blocks the VOR oracle waits\nuntil it calls responds to a request.")]),e._v(" "),t("h2",{attrs:{id:"functions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#VORConsumerBase-fulfillRandomness-bytes32-uint256-"}},[t("code",[e._v("fulfillRandomness(bytes32 requestId, uint256 randomness) internal")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#VORConsumerBase-requestRandomness-bytes32-uint256-uint256-"}},[t("code",[e._v("requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed) internal")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#VORConsumerBase-_increaseVorCoordinatorAllowance-uint256-"}},[t("code",[e._v("_increaseVorCoordinatorAllowance(uint256 _amount) internal")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#VORConsumerBase-_setVORCoordinator-address-"}},[t("code",[e._v("_setVORCoordinator(address _vorCoordinator) internal")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#VORConsumerBase-constructor-address-address-"}},[t("code",[e._v("constructor(address _vorCoordinator, address _xfund) internal")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#VORConsumerBase-rawFulfillRandomness-bytes32-uint256-"}},[t("code",[e._v("rawFulfillRandomness(bytes32 requestId, uint256 randomness) external")])])])]),e._v(" "),t("p",[t("a",{attrs:{name:"VORConsumerBase-fulfillRandomness-bytes32-uint256-"}})]),e._v(" "),t("h3",{attrs:{id:"function-fulfillrandomness-bytes32-requestid-uint256-randomness-internal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-fulfillrandomness-bytes32-requestid-uint256-randomness-internal"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("fulfillRandomness(bytes32 requestId, uint256 randomness) internal")])]),e._v(" "),t("p",[e._v("VORConsumerBase expects its subcontracts to have a method with this\nsignature, and will call it once it has verified the proof\nassociated with the randomness. (It is triggered via a call to\nrawFulfillRandomness, below.)")]),e._v(" "),t("h4",{attrs:{id:"parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[e._v("#")]),e._v(" Parameters:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("requestId")]),e._v(": The Id initially returned by requestRandomness")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("randomness")]),e._v(": the VOR output\n"),t("a",{attrs:{name:"VORConsumerBase-requestRandomness-bytes32-uint256-uint256-"}})])])]),e._v(" "),t("h3",{attrs:{id:"function-requestrandomness-bytes32-keyhash-uint256-fee-uint256-seed-internal-bytes32-requestid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-requestrandomness-bytes32-keyhash-uint256-fee-uint256-seed-internal-bytes32-requestid"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("requestRandomness(bytes32 _keyHash, uint256 _fee, uint256 _seed) internal -> bytes32 requestId")])]),e._v(" "),t("p",[e._v("The fulfillRandomness method receives the output, once it's provided\nby the Oracle, and verified by the vorCoordinator.")]),e._v(" "),t("p",[e._v("The _keyHash must already be registered with the VORCoordinator, and\nthe _fee must exceed the fee specified during registration of the\n_keyHash.")]),e._v(" "),t("p",[e._v("The _seed parameter is vestigial, and is kept only for API\ncompatibility with older versions. It can't "),t("em",[e._v("hurt")]),e._v(" to mix in some of\nyour own randomness, here, but it's not necessary because the VOR\noracle will mix the hash of the block containing your request into the\nVOR seed it ultimately uses.")]),e._v(" "),t("h4",{attrs:{id:"parameters-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[e._v("#")]),e._v(" Parameters:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("_keyHash")]),e._v(": ID of public key against which randomness is generated")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("_fee")]),e._v(": The amount of xFUND to send with the request")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("_seed")]),e._v(": seed mixed into the input of the VOR.")])])]),e._v(" "),t("h4",{attrs:{id:"return-values"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#return-values"}},[e._v("#")]),e._v(" Return Values:")]),e._v(" "),t("ul",[t("li",[e._v("requestId unique ID for this request")])]),e._v(" "),t("p",[e._v("The returned requestId can be used to distinguish responses to\nconcurrent requests. It is passed as the first argument to\nfulfillRandomness.\n"),t("a",{attrs:{name:"VORConsumerBase-_increaseVorCoordinatorAllowance-uint256-"}})]),e._v(" "),t("h3",{attrs:{id:"function-increasevorcoordinatorallowance-uint256-amount-internal-bool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-increasevorcoordinatorallowance-uint256-amount-internal-bool"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("_increaseVorCoordinatorAllowance(uint256 _amount) internal -> bool")])]),e._v(" "),t("p",[e._v("No description")]),e._v(" "),t("h4",{attrs:{id:"parameters-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[e._v("#")]),e._v(" Parameters:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("_amount")]),e._v(": uint256 amount to increase allowance by\n"),t("a",{attrs:{name:"VORConsumerBase-_setVORCoordinator-address-"}})])]),e._v(" "),t("h3",{attrs:{id:"function-setvorcoordinator-address-vorcoordinator-internal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-setvorcoordinator-address-vorcoordinator-internal"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("_setVORCoordinator(address _vorCoordinator) internal")])]),e._v(" "),t("p",[e._v("No description")]),e._v(" "),t("h4",{attrs:{id:"parameters-4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[e._v("#")]),e._v(" Parameters:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("_vorCoordinator")]),e._v(": address new VORCoordinator address\n"),t("a",{attrs:{name:"VORConsumerBase-constructor-address-address-"}})])]),e._v(" "),t("h3",{attrs:{id:"function-constructor-address-vorcoordinator-address-xfund-internal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-constructor-address-vorcoordinator-address-xfund-internal"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("constructor(address _vorCoordinator, address _xfund) internal")])]),e._v(" "),t("p",[e._v("No description")]),e._v(" "),t("h4",{attrs:{id:"parameters-5"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[e._v("#")]),e._v(" Parameters:")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("_vorCoordinator")]),e._v(": address of VORCoordinator contract")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("_xfund")]),e._v(": address of xFUND token contract\n"),t("a",{attrs:{name:"VORConsumerBase-rawFulfillRandomness-bytes32-uint256-"}})])])]),e._v(" "),t("h3",{attrs:{id:"function-rawfulfillrandomness-bytes32-requestid-uint256-randomness-external"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#function-rawfulfillrandomness-bytes32-requestid-uint256-randomness-external"}},[e._v("#")]),e._v(" Function "),t("code",[e._v("rawFulfillRandomness(bytes32 requestId, uint256 randomness) external")])]),e._v(" "),t("p",[e._v("No description")])])}),[],!1,null,null,null);t.default=r.exports}}]);